# Use this, if you run a full Linux installation
services:
  ros2-devcontainer:
    build:
      # context: ..
      dockerfile: Dockerfile
    # Optional: Access external devices, e.g., USB cameras
    privileged: true
    volumes:
      - ..:/workspace:cached
      # GUI support
      - /tmp/.X11-unix:/tmp/.X11-unix
      # Accelerated 3D graphics
      - /usr/lib/wsl:/usr/lib/wsl
      # User specific runtime files
      - $XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR
    network_mode: host
    # Avoid Qt glitches
    ipc: host
    environment:
      # Do not spam IRT network
      ROS_LOCALHOST_ONLY: 1
      # When using local network check if anyone else is spamming on this ID
      ROS_DOMAIN_ID: 42
      # GUI support
      DISPLAY: $DISPLAY
      WAYLAND_DISPLAY: $WAYLAND_DISPLAY
      XDG_RUNTIME_DIR: $XDG_RUNTIME_DIR
      PULSE_SERVER: $PULSE_SERVER
      # Linux (non WSL): Use NVIDIA GPU for rendering, also activate in deploy
      # __NV_PRIME_RENDER_OFFLOAD: 1
      # __GLX_VENDOR_LIBRARY_NAME: nvidia
      # WSL: Switch between GPUs for 3D acceleration, e.g., Intel & NVIDIA
      MESA_D3D12_DEFAULT_ADAPTER_NAME: Intel
      # Accelerated 3D graphics
      LD_LIBRARY_PATH: /usr/lib/wsl/lib
    devices:
      # Accelerated 3D graphics
      - /dev/dri
    # Optional: Make NVIDIA drivers incl. CUDA available
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           capabilities: [gpu]
    #           count: 1 # limit number of GPUs used by container
    # Required for ptrace-based debuggers like C++
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
      - seccomp:unconfined
    # Avoid shutting down after process ends
    command: sleep infinity
