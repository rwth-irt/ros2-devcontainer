# Use this, if you run Linux in Windows via WSL2
# VSCode remote containers extensions does the magic of enabling GUI access
services:
  ros2-devcontainer:
    build:
      # context: ..
      dockerfile: WSL.Dockerfile
    # Optional:Access external devices, e.g., USB cameras
    privileged: true
    volumes:
      - ..:/workspace:cached
      # Accelerated 3D graphics
      - /usr/lib/wsl:/usr/lib/wsl
    network_mode: host
    environment:
      # Do not spam IRT network
      ROS_LOCALHOST_ONLY: 1
      # When using local network check if anyone else is spamming on this ID
      ROS_DOMAIN_ID: 42
      # Optional: Switch between GPUs for 3D acceleration, e.g., Intel or NVIDIA
      MESA_D3D12_DEFAULT_ADAPTER_NAME: Intel
      # Accelerated 3D graphics
      LD_LIBRARY_PATH: /usr/lib/wsl/lib
    devices:
      # Accelerated 3D graphics
      - /dev/dri
      - /dev/dxg
    # Optional: Enable CUDA
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              # count: 1 # limit number of GPUs used by container
    group_add:
      # Access /dev/dri/card0
      - video
    # Required for ptrace-based debuggers like C++
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
      - seccomp:unconfined
    # Avoid shutting down after process ends
    command: sleep infinity
